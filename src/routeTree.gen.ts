/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./app/routes/__root";
import { Route as CommonRouteImport } from "./app/routes/_common/route";
import { Route as AuthRouteImport } from "./app/routes/_auth/route";

// Create Virtual Routes

const CommonIndexLazyImport = createFileRoute("/_common/")();
const AuthAuthIndexLazyImport = createFileRoute("/_auth/auth/")();
const AuthAuthSignUpLazyImport = createFileRoute("/_auth/auth/sign-up")();

// Create/Update Routes

const CommonRouteRoute = CommonRouteImport.update({
	id: "/_common",
	getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
	id: "/_auth",
	getParentRoute: () => rootRoute,
} as any);

const CommonIndexLazyRoute = CommonIndexLazyImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => CommonRouteRoute,
} as any).lazy(() => import("./app/routes/_common/index.lazy").then((d) => d.Route));

const AuthAuthIndexLazyRoute = AuthAuthIndexLazyImport.update({
	id: "/auth/",
	path: "/auth/",
	getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import("./app/routes/_auth/auth/index.lazy").then((d) => d.Route));

const AuthAuthSignUpLazyRoute = AuthAuthSignUpLazyImport.update({
	id: "/auth/sign-up",
	path: "/auth/sign-up",
	getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import("./app/routes/_auth/auth/sign-up.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/_auth": {
			id: "/_auth";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof AuthRouteImport;
			parentRoute: typeof rootRoute;
		};
		"/_common": {
			id: "/_common";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof CommonRouteImport;
			parentRoute: typeof rootRoute;
		};
		"/_common/": {
			id: "/_common/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof CommonIndexLazyImport;
			parentRoute: typeof CommonRouteImport;
		};
		"/_auth/auth/sign-up": {
			id: "/_auth/auth/sign-up";
			path: "/auth/sign-up";
			fullPath: "/auth/sign-up";
			preLoaderRoute: typeof AuthAuthSignUpLazyImport;
			parentRoute: typeof AuthRouteImport;
		};
		"/_auth/auth/": {
			id: "/_auth/auth/";
			path: "/auth";
			fullPath: "/auth";
			preLoaderRoute: typeof AuthAuthIndexLazyImport;
			parentRoute: typeof AuthRouteImport;
		};
	}
}

// Create and export the route tree

interface AuthRouteRouteChildren {
	AuthAuthSignUpLazyRoute: typeof AuthAuthSignUpLazyRoute;
	AuthAuthIndexLazyRoute: typeof AuthAuthIndexLazyRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
	AuthAuthSignUpLazyRoute: AuthAuthSignUpLazyRoute,
	AuthAuthIndexLazyRoute: AuthAuthIndexLazyRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(AuthRouteRouteChildren);

interface CommonRouteRouteChildren {
	CommonIndexLazyRoute: typeof CommonIndexLazyRoute;
}

const CommonRouteRouteChildren: CommonRouteRouteChildren = {
	CommonIndexLazyRoute: CommonIndexLazyRoute,
};

const CommonRouteRouteWithChildren = CommonRouteRoute._addFileChildren(CommonRouteRouteChildren);

export interface FileRoutesByFullPath {
	"": typeof CommonRouteRouteWithChildren;
	"/": typeof CommonIndexLazyRoute;
	"/auth/sign-up": typeof AuthAuthSignUpLazyRoute;
	"/auth": typeof AuthAuthIndexLazyRoute;
}

export interface FileRoutesByTo {
	"": typeof AuthRouteRouteWithChildren;
	"/": typeof CommonIndexLazyRoute;
	"/auth/sign-up": typeof AuthAuthSignUpLazyRoute;
	"/auth": typeof AuthAuthIndexLazyRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/_auth": typeof AuthRouteRouteWithChildren;
	"/_common": typeof CommonRouteRouteWithChildren;
	"/_common/": typeof CommonIndexLazyRoute;
	"/_auth/auth/sign-up": typeof AuthAuthSignUpLazyRoute;
	"/_auth/auth/": typeof AuthAuthIndexLazyRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "" | "/" | "/auth/sign-up" | "/auth";
	fileRoutesByTo: FileRoutesByTo;
	to: "" | "/" | "/auth/sign-up" | "/auth";
	id: "__root__" | "/_auth" | "/_common" | "/_common/" | "/_auth/auth/sign-up" | "/_auth/auth/";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	AuthRouteRoute: typeof AuthRouteRouteWithChildren;
	CommonRouteRoute: typeof CommonRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	AuthRouteRoute: AuthRouteRouteWithChildren,
	CommonRouteRoute: CommonRouteRouteWithChildren,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_common"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/auth/sign-up",
        "/_auth/auth/"
      ]
    },
    "/_common": {
      "filePath": "_common/route.tsx",
      "children": [
        "/_common/"
      ]
    },
    "/_common/": {
      "filePath": "_common/index.lazy.tsx",
      "parent": "/_common"
    },
    "/_auth/auth/sign-up": {
      "filePath": "_auth/auth/sign-up.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/auth/": {
      "filePath": "_auth/auth/index.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
